/*! For license information please see inject.js.LICENSE.txt */
(()=>{var e={460:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Info=t.LanguageCode=void 0,(n=t.LanguageCode||(t.LanguageCode={})).EN="EN",n.SV="SV",n.ANY="ANY",t.Info=class{static clone(e){return{title:e.title,description:e.description,errorMessageUnexpected:e.errorMessageUnexpected,header:e.header,insertionText:e.insertionText,keywords:[...e.keywords],subHeader:e.subHeader}}}},206:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Field=t.EnumDomainUtils=t.Schema=t.KeyWithDescriptions=t.unwrapSchema=t.unwrapDomain=t.unwrapDescription=t.StandardDomain=void 0;const r=n(460);var o;(o=t.StandardDomain||(t.StandardDomain={})).DATE="DATE",o.NUMBER="NUMBER",o.TEXT="TEXT",t.unwrapDescription=e=>{const t={};if(Array.isArray(e))t[r.LanguageCode.ANY]=e;else if("string"==typeof e)t[r.LanguageCode.ANY]=[e];else{const n=Object.keys(e);for(const r of n){let n=e[r];"string"==typeof n&&(n=[n]),t[r]=n}}return t},t.unwrapDomain=e=>{if(!e)return null;if(!a.isEnumDomain(e))return e;const n={};if(Array.isArray(e))for(let t=0;t<e.length;t++)n[e[t]]={[r.LanguageCode.ANY]:[e[t]]};else for(const r of Object.keys(e))n[r]=t.unwrapDescription(e[r]);return n},t.unwrapSchema=e=>{const n=[];return e.fields.forEach((e=>{n.push(i.from(e.key,e.description,e.domain))})),e.fields=n,e.name={key:e.name.key,description:t.unwrapDescription(e.name.description)},e},t.KeyWithDescriptions=class{},t.Schema=class{};class a{static isEnumDomain(e){return"string"!=typeof e}}t.EnumDomainUtils=a;class i{static from(e,n,r){return{description:t.unwrapDescription(n),domain:t.unwrapDomain(r),key:e}}static clone(e){let t=null;return e.description&&(t={},Object.keys(e.description).forEach((n=>{t[n]=r.Info.clone(e.description[n])}))),{description:t,key:e.key,domain:e.domain}}}t.Field=i},439:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.translate=t.cacheKey=t.config=t.generateSchema=t.FieldInfo=t.getSuperClasses=t.ClassInfo=t._override=void 0;const r=n(206),o=n(669);n(660);let a=null,i="https://api.query.quantleaf.com";const s=e=>"__query_metadata__"+e;t._override=e=>{i=e.apiEndpoint};const u=e=>{switch(e){case"Number":return r.StandardDomain.NUMBER;case"Date":return r.StandardDomain.DATE;case"String":return r.StandardDomain.TEXT;default:throw new Error("Unsupported type: "+e)}};t.ClassInfo=function(e){return t=>{const n=s(t.name);let o=Reflect.getOwnMetadata(n,t.prototype);o||(o={name:{key:null,description:{}},fields:[]}),e.description?(o.name=e,o.name.description=r.unwrapDescription(o.name.description)):o.name.description=r.unwrapDescription(e),o.name.key||(o.name.key=t.name),Reflect.defineMetadata(n,o,t.prototype)}},t.getSuperClasses=e=>{const t=[];if(e instanceof Function){let n=e;for(;n;){const e=Object.getPrototypeOf(n);if(!e||e===Object||!e.name)break;n=e,t.push(e.name)}}return t},t.FieldInfo=function(e){return(t,n)=>{const o=n.toString();let a=e;if(e.description){const n=e;if(!n.domain){const e=Reflect.getMetadata("design:type",t,o);if(!e)throw new Error("Could not find the type of field with key: "+o);n.domain=u(e.name)}if(!n.domain)throw new Error("Missing type for field: "+JSON.stringify(e));a=r.Field.from(n.key?n.key:o,n.description,n.domain)}else{const n=Reflect.getMetadata("design:type",t,o);if(!n)throw new Error("Could not find the type of field with key: "+o);a=r.Field.from(o,e,u(n.name))}const i=s(t.constructor.name);let c=Reflect.getMetadata(i,t);c||(c={name:{description:{},key:null},fields:[]}),a.key||(a.key=o),c.fields.push(a),Reflect.defineMetadata(i,c,t)}},t.generateSchema=e=>{var n;const r=(e=>{const n=[];t.getSuperClasses(e.constructor).forEach((t=>{var r;const o=null===(r=Reflect.getMetadata(s(t),e))||void 0===r?void 0:r.fields;o&&n.push(...o)}));const r=Reflect.getMetadata(s(e.constructor.name),e);return{fields:[...r.fields,...n],name:r.name,id:r.id}})(e);if(!r)throw new Error("Failed to create schema");if(!(null==r?void 0:r.name.key))throw new Error("Missing schema name, use @ClassInfo on the class");if(c(null==r?void 0:r.name.description))throw new Error("Missing desciption");if(!((null===(n=null==r?void 0:r.fields)||void 0===n?void 0:n.length)>0))throw new Error("Missing fields, must provide atleast one definition using @FieldInfo");return(e=>{const t=new Set;e.fields.forEach((e=>{if(t.has(e.key))throw new Error("Duplicate field: "+e.key);t.add(e.key)}))})(r),r};const c=e=>!e||0===Object.getOwnPropertyNames(e).length,l=new Map;t.config=e=>{a=e},t.cacheKey=e=>{var t;return null===(t=e.constructor)||void 0===t?void 0:t.name},t.translate=async(e,n,r,s,u=!0)=>{const c=[],d=new Set;n.forEach((e=>{if(!e)return;const n=t.cacheKey(e);if(d.has(n))throw new Error("Duplicate class names for: "+t.cacheKey+", class names must be unique");d.add(n);let r=l.get(n);r||(r=t.generateSchema(e),u&&l.set(n,r)),c.push(r)}));const f={text:e,schemas:c,options:s,actions:r};if(!a)throw new Error('Missing API Key, provide one by invoking "config" once');return(await o.default({method:"post",url:i+"/translate",headers:{"X-API-KEY":a},data:f}).catch((e=>{var t;throw console.error("Failed to perform Quantleaf Query translate request",null===(t=e.response)||void 0===t?void 0:t.data),e}))).data}},669:(e,t,n)=>{e.exports=n(609)},448:(e,t,n)=>{"use strict";var r=n(867),o=n(26),a=n(372),i=n(327),s=n(97),u=n(109),c=n(985),l=n(61);e.exports=function(e){return new Promise((function(t,n){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(p+":"+h)}var m=s(e.baseURL,e.url);if(y.open(e.method.toUpperCase(),i(m,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,y.onreadystatechange=function(){if(y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in y?u(y.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};o(t,n,a),y=null}},y.onabort=function(){y&&(n(l("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){n(l("Network Error",e,null,y)),y=null},y.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(l(t,e,"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var g=(e.withCredentials||c(m))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in y&&r.forEach(f,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:y.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),e.responseType)try{y.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){y&&(y.abort(),n(e),y=null)})),d||(d=null),y.send(d)}))}},609:(e,t,n)=>{"use strict";var r=n(867),o=n(849),a=n(321),i=n(185);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=s(n(655));u.Axios=a,u.create=function(e){return s(i(u.defaults,e))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(e){return Promise.all(e)},u.spread=n(713),u.isAxiosError=n(268),e.exports=u,e.exports.default=u},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),o=n(327),a=n(782),i=n(572),s=n(185);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=u},782:(e,t,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,n)=>{"use strict";var r=n(793),o=n(303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},572:(e,t,n)=>{"use strict";var r=n(867),o=n(527),a=n(502),i=n(655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(a,c),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var l=o.concat(a).concat(i).concat(s),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(d,c),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),o=n(16),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=n(448)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},867:(e,t,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},660:(e,t,n)=>{var r;!function(e){!function(t){var r="object"==typeof n.g?n.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),o=a(e);function a(e,t){return function(n,r){"function"!=typeof e[n]&&Object.defineProperty(e,n,{configurable:!0,writable:!0,value:r}),t&&t(n,r)}}void 0===r.Reflect?r.Reflect=e:o=a(r.Reflect,o),function(e){var t=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,r=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",o=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",a="function"==typeof Object.create,i={__proto__:[]}instanceof Array,s=!a&&!i,u={create:a?function(){return q(Object.create(null))}:i?function(){return q({__proto__:null})}:function(){return q({})},has:s?function(e,n){return t.call(e,n)}:function(e,t){return t in e},get:s?function(e,n){return t.call(e,n)?e[n]:void 0}:function(e,t){return e[t]}},c=Object.getPrototypeOf(Function),l="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,d=l||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],n=function(){function e(e,t,n){this._index=0,this._keys=e,this._values=t,this._selector=n}return e.prototype["@@iterator"]=function(){return this},e.prototype[o]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var n=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var n=this._find(e,!0);return this._values[n]=t,this},t.prototype.delete=function(t){var n=this._find(t,!1);if(n>=0){for(var r=this._keys.length,o=n+1;o<r;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new n(this._keys,this._values,r)},t.prototype.values=function(){return new n(this._keys,this._values,a)},t.prototype.entries=function(){return new n(this._keys,this._values,i)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[o]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function r(e,t){return e}function a(e,t){return t}function i(e,t){return[e,t]}}():Map,f=l||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new d}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[o]=function(){return this.keys()},e}():Set,y=new(l||"function"!=typeof WeakMap?function(){var e=u.create(),n=r();return function(){function e(){this._key=r()}return e.prototype.has=function(e){var t=o(e,!1);return void 0!==t&&u.has(t,this._key)},e.prototype.get=function(e){var t=o(e,!1);return void 0!==t?u.get(t,this._key):void 0},e.prototype.set=function(e,t){return o(e,!0)[this._key]=t,this},e.prototype.delete=function(e){var t=o(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=r()},e}();function r(){var t;do{t="@@WeakMap@@"+i()}while(u.has(e,t));return e[t]=!0,t}function o(e,r){if(!t.call(e,n)){if(!r)return;Object.defineProperty(e,n,{value:u.create()})}return e[n]}function a(e,t){for(var n=0;n<t;++n)e[n]=255*Math.random()|0;return e}function i(){var e,t=(e=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e):a(new Array(e),e));t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var n="",r=0;r<16;++r){var o=t[r];4!==r&&6!==r&&8!==r||(n+="-"),o<16&&(n+="0"),n+=o.toString(16).toLowerCase()}return n}}():WeakMap);function p(e,t,n){var r=y.get(e);if(x(r)){if(!n)return;r=new d,y.set(e,r)}var o=r.get(t);if(x(o)){if(!n)return;o=new d,r.set(t,o)}return o}function h(e,t,n){if(m(e,t,n))return!0;var r=D(t);return!k(r)&&h(e,r,n)}function m(e,t,n){var r=p(t,n,!1);return!x(r)&&!!r.has(e)}function g(e,t,n){if(m(e,t,n))return v(e,t,n);var r=D(t);return k(r)?void 0:g(e,r,n)}function v(e,t,n){var r=p(t,n,!1);if(!x(r))return r.get(e)}function w(e,t,n,r){p(n,r,!0).set(e,t)}function b(e,t){var n=S(e,t),r=D(e);if(null===r)return n;var o=b(r,t);if(o.length<=0)return n;if(n.length<=0)return o;for(var a=new f,i=[],s=0,u=n;s<u.length;s++){var c=u[s];a.has(c)||(a.add(c),i.push(c))}for(var l=0,d=o;l<d.length;l++)c=d[l],a.has(c)||(a.add(c),i.push(c));return i}function S(e,t){var n=[],r=p(e,t,!1);if(x(r))return n;for(var a=function(e){var t=A(e,o);if(!M(t))throw new TypeError;var n=t.call(e);if(!_(n))throw new TypeError;return n}(r.keys()),i=0;;){var s=I(a);if(!s)return n.length=i,n;var u=s.value;try{n[i]=u}catch(e){try{O(a)}finally{throw e}}i++}}function E(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function x(e){return void 0===e}function k(e){return null===e}function _(e){return"object"==typeof e?null!==e:"function"==typeof e}function T(e,t){switch(E(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var n=3===t?"string":5===t?"number":"default",o=A(e,r);if(void 0!==o){var a=o.call(e,n);if(_(a))throw new TypeError;return a}return function(e,t){if("string"===t){var n=e.toString;if(M(n)&&!_(o=n.call(e)))return o;if(M(r=e.valueOf)&&!_(o=r.call(e)))return o}else{var r;if(M(r=e.valueOf)&&!_(o=r.call(e)))return o;var o,a=e.toString;if(M(a)&&!_(o=a.call(e)))return o}throw new TypeError}(e,"default"===n?"number":n)}function C(e){var t=T(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function P(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function M(e){return"function"==typeof e}function R(e){return"function"==typeof e}function A(e,t){var n=e[t];if(null!=n){if(!M(n))throw new TypeError;return n}}function I(e){var t=e.next();return!t.done&&t}function O(e){var t=e.return;t&&t.call(e)}function D(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===c)return t;if(t!==c)return t;var n=e.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return t;var o=r.constructor;return"function"!=typeof o||o===e?t:o}function q(e){return e.__=void 0,delete e.__,e}e("decorate",(function(e,t,n,r){if(x(n)){if(!P(e))throw new TypeError;if(!R(t))throw new TypeError;return function(e,t){for(var n=e.length-1;n>=0;--n){var r=(0,e[n])(t);if(!x(r)&&!k(r)){if(!R(r))throw new TypeError;t=r}}return t}(e,t)}if(!P(e))throw new TypeError;if(!_(t))throw new TypeError;if(!_(r)&&!x(r)&&!k(r))throw new TypeError;return k(r)&&(r=void 0),function(e,t,n,r){for(var o=e.length-1;o>=0;--o){var a=(0,e[o])(t,n,r);if(!x(a)&&!k(a)){if(!_(a))throw new TypeError;r=a}}return r}(e,t,n=C(n),r)})),e("metadata",(function(e,t){return function(n,r){if(!_(n))throw new TypeError;if(!x(r)&&!function(e){switch(E(e)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;w(e,t,n,r)}})),e("defineMetadata",(function(e,t,n,r){if(!_(n))throw new TypeError;return x(r)||(r=C(r)),w(e,t,n,r)})),e("hasMetadata",(function(e,t,n){if(!_(t))throw new TypeError;return x(n)||(n=C(n)),h(e,t,n)})),e("hasOwnMetadata",(function(e,t,n){if(!_(t))throw new TypeError;return x(n)||(n=C(n)),m(e,t,n)})),e("getMetadata",(function(e,t,n){if(!_(t))throw new TypeError;return x(n)||(n=C(n)),g(e,t,n)})),e("getOwnMetadata",(function(e,t,n){if(!_(t))throw new TypeError;return x(n)||(n=C(n)),v(e,t,n)})),e("getMetadataKeys",(function(e,t){if(!_(e))throw new TypeError;return x(t)||(t=C(t)),b(e,t)})),e("getOwnMetadataKeys",(function(e,t){if(!_(e))throw new TypeError;return x(t)||(t=C(t)),S(e,t)})),e("deleteMetadata",(function(e,t,n){if(!_(t))throw new TypeError;x(n)||(n=C(n));var r=p(t,n,!1);if(x(r))return!1;if(!r.delete(e))return!1;if(r.size>0)return!0;var o=y.get(t);return o.delete(n),o.size>0||y.delete(t),!0}))}(o)}()}(r||(r={}))},5:(e,t,n)=>{"use strict";n.d(t,{Mx:()=>s,Eb:()=>u,cn:()=>c,Fn:()=>l,OM:()=>d,Tq:()=>f,iT:()=>y,Ye:()=>p,zb:()=>h,DO:()=>m,b2:()=>g,jT:()=>v,VR:()=>w,CG:()=>b,uq:()=>S,w8:()=>E});var r=n(439),o=n(206),a=function(e,t,n,r){var o,a=arguments.length,i=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(i=(a<3?o(i):a>3?o(t,n,i):o(t,n))||i);return a>3&&i&&Object.defineProperty(t,n,i),i},i=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};const s="date",u="allWordsKey",c="anyOfWords",l="exactPhrase",d="nonOfWords",f="numbersRange",y="unit",p="language",h="country",m="site",g="textLocation",v="safeSearch",w="fileType",b="license",S="resultType";let E=class{};a([(0,r.FieldInfo)({key:S,description:"result type",domain:{isch:["images","pictures"],vid:["videos","clips"],nws:["news"],bks:["books","literature"],shop:["shopping","shop"]}}),i("design:type",String)],E.prototype,"contentType",void 0),a([(0,r.FieldInfo)({key:u,description:["content","contains","containing","about","all of"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"allwords",void 0),a([(0,r.FieldInfo)({key:l,description:["exact phrase","exact match","perfect match","exact"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"exactPhrase",void 0),a([(0,r.FieldInfo)({key:c,description:["any words","any of","has any of","containing any of","contains any of"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"anyOfWords",void 0),a([(0,r.FieldInfo)({key:d,description:["not contains","not any of","non of","non of the words","dont contain","don't contain","dont include","don't include","not including"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"notAnyOfWords",void 0),a([(0,r.FieldInfo)({key:m,description:["website","site"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"website",void 0),a([(0,r.FieldInfo)({key:f,description:"numbers",domain:o.StandardDomain.NUMBER}),i("design:type",Number)],E.prototype,"numbersRange",void 0),a([(0,r.FieldInfo)({key:y,description:"unit",domain:o.StandardDomain.TEXT}),i("design:type",Number)],E.prototype,"unit",void 0),a([(0,r.FieldInfo)({key:s,description:"date",domain:o.StandardDomain.DATE}),i("design:type",Date)],E.prototype,"date",void 0),a([(0,r.FieldInfo)({key:g,description:"text location",domain:{allintitle:"in title",allintext:"in text",allinurl:["in url","in web adress"],allinanchor:["in links to site"]}}),i("design:type",Date)],E.prototype,"textLocationKey",void 0),a([(0,r.FieldInfo)({key:v,description:"safety filter",domain:{safe:["safe search","safesearch"]}}),i("design:type",String)],E.prototype,"safeSearch",void 0),a([(0,r.FieldInfo)({key:w,description:["file type","filetype","file format"],domain:o.StandardDomain.TEXT}),i("design:type",String)],E.prototype,"fileType",void 0),a([(0,r.FieldInfo)({key:b,description:["license","usage rights","usage right"],domain:{f:"free to use or share",fc:["free to use or share, even commercially","free to use or share even commercially"],fm:["free to use, share or modify","free to use share or modify"],fmc:["free to use, share or modify, even commercially","commercial use"]}}),i("design:type",String)],E.prototype,"license",void 0),a([(0,r.FieldInfo)({key:p,description:["language","from"],domain:{lang_af:"Afrikaans",lang_ar:"Arabic",lang_hy:"Armenian",lang_be:"Belarusian",lang_bg:"Bulgarian",lang_ca:"Catalan","lang_zh-CN":"Chinese simplified","lang_zh-TW":"Chinese traditional",lang_hr:"Croatian",lang_cs:"Czech",lang_da:"Danish",lang_nl:"Dutch",lang_en:"English",lang_eo:"Esperanto",lang_et:"Estonian",lang_tl:"Filipino",lang_fi:"Finnish",lang_fr:"French",lang_de:"German",lang_el:"Greek",lang_iw:"Hebrew",lang_hi:"Hindi",lang_hu:"Hungarian",lang_is:"Icelandic",lang_id:"Indonesian",lang_it:"Italian",lang_ja:"Japanese",lang_ko:"Korean",lang_lv:"Latvian",lang_lt:"Lithuanian",lang_no:"Norwegian",lang_fa:"Persian",lang_pl:"Polish",lang_pt:"Portuguese",lang_ro:"Romanian",lang_ru:"Russian",lang_sr:"Serbian",lang_sk:"Slovak",lang_sl:"Slovenian",lang_es:"Spanish",lang_sw:"Swahili",lang_sv:"Swedish",lang_th:"Thai",lang_tr:"Turkish",lang_uk:"Ukrainian",lang_vi:"Vietnamese"}}),i("design:type",String)],E.prototype,"lanugage",void 0),a([(0,r.FieldInfo)({key:h,description:["country","region"],domain:{countryAF:"Afghanistan",countryAL:"Albania",countryDZ:"Algeria",countryAS:"American Samoa",countryAD:"Andorra",countryAO:"Angola",countryAI:"Anguilla",countryAQ:"Antarctica",countryAG:"Antigua and Barbuda",countryAR:"Argentina",countryAM:"Armenia",countryAW:"Aruba",countryAU:"Australia",countryAT:"Austria",countryAZ:"Azerbaijan",countryBS:"Bahamas",countryBH:"Bahrain",countryBD:"Bangladesh",countryBB:"Barbados",countryBY:"Belarus",countryBE:"Belgium",countryBZ:"Belize",countryBJ:"Benin",countryBM:"Bermuda",countryBT:"Bhutan",countryBO:"Bolivia",countryBA:"Bosnia and Herzegovina",countryBW:"Botswana",countryBV:"Bouvet Island",countryBR:"Brazil",countryIO:"British Indian Ocean Territory",countryVG:"British Virgin Islands",countryBN:"Brunei",countryBG:"Bulgaria",countryBF:"Burkina Faso",countryBI:"Burundi",countryKH:"Cambodia",countryCM:"Cameroon",countryCA:"Canada",countryCV:"Cape Verde",countryKY:"Cayman Islands",countryCF:"Central African Republic",countryTD:"Chad",countryCL:"Chile",countryCN:"China",countryCX:"Christmas Island",countryCC:"Cocos (Keeling) Islands",countryCO:"Colombia",countryKM:"Comoros",countryCG:"Congo - Brazzaville",countryCD:"Congo - Kinshasa",countryCK:"Cook Islands",countryCR:"Costa Rica",countryCI:"Côte d’Ivoire",countryHR:"Croatia",countryCU:"Cuba",countryCY:"Cyprus",countryCZ:"Czechia",countryDK:"Denmark",countryDJ:"Djibouti",countryDM:"Dominica",countryDO:"Dominican Republic",countryEC:"Ecuador",countryEG:"Egypt",countrySV:"El Salvador",countryGQ:"Equatorial Guinea",countryER:"Eritrea",countryEE:"Estonia",countrySZ:"Eswatini",countryET:"Ethiopia",countryFK:"Falkland Islands (Islas Malvinas)",countryFO:"Faroe Islands",countryFJ:"Fiji",countryFI:"Finland",countryFR:"France",countryGF:"French Guiana",countryPF:"French Polynesia",countryTF:"French Southern Territories",countryGA:"Gabon",countryGM:"Gambia",countryGE:"Georgia",countryDE:"Germany",countryGH:"Ghana",countryGI:"Gibraltar",countryGR:"Greece",countryGL:"Greenland",countryGD:"Grenada",countryGP:"Guadeloupe",countryGU:"Guam",countryGT:"Guatemala",countryGN:"Guinea",countryGW:"Guinea-Bissau",countryGY:"Guyana",countryHT:"Haiti",countryHM:"Heard and McDonald Islands",countryHN:"Honduras",countryHK:"Hong Kong",countryHU:"Hungary",countryIS:"Iceland",countryIN:"India",countryID:"Indonesia",countryIR:"Iran",countryIQ:"Iraq",countryIE:"Ireland",countryIL:"Israel",countryIT:"Italy",countryJM:"Jamaica",countryJP:"Japan",countryJO:"Jordan",countryKZ:"Kazakhstan",countryKE:"Kenya",countryKI:"Kiribati",countryKW:"Kuwait",countryKG:"Kyrgyzstan",countryLA:"Laos",countryLV:"Latvia",countryLB:"Lebanon",countryLS:"Lesotho",countryLR:"Liberia",countryLY:"Libya",countryLI:"Liechtenstein",countryLT:"Lithuania",countryLU:"Luxembourg",countryMO:"Macao",countryMG:"Madagascar",countryMW:"Malawi",countryMY:"Malaysia",countryMV:"Maldives",countryML:"Mali",countryMT:"Malta",countryMH:"Marshall Islands",countryMQ:"Martinique",countryMR:"Mauritania",countryMU:"Mauritius",countryYT:"Mayotte",countryMX:"Mexico",countryFM:"Micronesia",countryMD:"Moldova",countryMC:"Monaco",countryMN:"Mongolia",countryMS:"Montserrat",countryMA:"Morocco",countryMZ:"Mozambique",countryMM:"Myanmar (Burma)",countryNA:"Namibia",countryNR:"Nauru",countryNP:"Nepal",countryNL:"Netherlands",countryNC:"New Caledonia",countryNZ:"New Zealand",countryNI:"Nicaragua",countryNE:"Niger",countryNG:"Nigeria",countryNU:"Niue",countryNF:"Norfolk Island",countryKP:"North Korea",countryMK:"North Macedonia",countryMP:"Northern Mariana Islands",countryNO:"Norway",countryOM:"Oman",countryPK:"Pakistan",countryPW:"Palau",countryPS:"Palestine",countryPA:"Panama",countryPG:"Papua New Guinea",countryPY:"Paraguay",countryPE:"Peru",countryPH:"Philippines",countryPN:"Pitcairn Islands",countryPL:"Poland",countryPT:"Portugal",countryPR:"Puerto Rico",countryQA:"Qatar",countryRE:"Réunion",countryRO:"Romania",countryRU:"Russia",countryRW:"Rwanda",countryWS:"Samoa",countrySM:"San Marino",countryST:"São Tomé and Príncipe",countrySA:"Saudi Arabia",countrySN:"Senegal",countryRS:"Serbia",countrySC:"Seychelles",countrySL:"Sierra Leone",countrySG:"Singapore",countrySK:"Slovakia",countrySI:"Slovenia",countrySB:"Solomon Islands",countrySO:"Somalia",countryZA:"South Africa",countryGS:"South Georgia and South Sandwich Islands",countryKR:"South Korea",countryES:"Spain",countryLK:"Sri Lanka",countrySH:"St. Helena",countryKN:"St. Kitts and Nevis",countryLC:"St. Lucia",countryPM:"St. Pierre and Miquelon",countryVC:"St. Vincent and Grenadines",countrySD:"Sudan",countrySR:"Suriname",countrySJ:"Svalbard and Jan Mayen",countrySE:"Sweden",countryCH:"Switzerland",countrySY:"Syria",countryTW:"Taiwan",countryTJ:"Tajikistan",countryTZ:"Tanzania",countryTH:"Thailand",countryTG:"Togo",countryTK:"Tokelau",countryTO:"Tonga",countryTT:"Trinidad and Tobago",countryTN:"Tunisia",countryTR:"Turkey",countryTM:"Turkmenistan",countryTC:"Turks and Caicos Islands",countryTV:"Tuvalu",countryUM:"U.S. Outlying Islands",countryVI:"U.S. Virgin Islands",countryUG:"Uganda",countryUA:"Ukraine",countryAE:"United Arab Emirates",countryGB:"United Kingdom",countryUS:"United States",countryUY:"Uruguay",countryUZ:"Uzbekistan",countryVU:"Vanuatu",countryVA:"Vatican City",countryVE:"Venezuela",countryVN:"Vietnam",countryWF:"Wallis and Futuna",countryEH:"Western Sahara",countryYE:"Yemen",countryZM:"Zambia",countryZW:"Zimbabwe"}}),i("design:type",String)],E.prototype,"contry",void 0),E=a([(0,r.ClassInfo)({key:"general-search",description:"general search"})],E)}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(5),t=n(439),r=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function s(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))};const o="/search",a=fetch("https://api.query.quantleaf.com/auth/key/demo").then((e=>e.text().then((e=>((0,t.config)(e),e)))));var i,s,u=!1,c=!1,l=!1,d={},f=!1,y=(new Date).getTime(),p=!1,h=null,m=null,g=!1,v=!1,w=!1,b=document.createElement("div");b.style.position="relative",b.style.zIndex="1000";var S=document.createElement("div");b.appendChild(S),S.style.position="fixed";var E=document.createElement("div");E.style.backgroundColor="white",E.style.padding="20px",E.style.minWidth="185px",E.style.width="185px",E.style.borderRadius="24px",E.style.padding="12px 20px",E.style.display="flex",E.style.flexDirection="row",E.style.zIndex="1000",E.style.boxShadow="0 2px 8px 1px rgb(64 60 67 / 24%)",E.style.justifyContent="left",E.style.margin="0px 20px 0 14px",E.style.whiteSpace="normal",E.style.lineHeight="initial";var x=document.createElement("div");x.style.zIndex="1000",x.style.display="flex",x.style.flexDirection="column",x.style.width="100%",E.appendChild(x);var k=document.createElement("div");k.style.display="flex",k.style.justifyContent="center",k.style.alignItems="center",k.style.margin="0px 20px 0 14px",k.style.cursor="pointer",k.style.zIndex="1000",k.style.boxShadow="rgb(64 60 67 / 24%) 0px 2px 8px 1px",k.style.background="none",k.style.backgroundColor="white",k.style.height="24px",k.style.width="24px",k.style.borderRadius="24px",k.onmouseenter=function(){k.style.boxShadow="rgb(64 60 67 / 34%) 0px 2px 8px 1px"},k.onmouseleave=function(){L()};var _=document.createElement("div");_.style.zIndex="1000",_.style.display="flex",_.style.flexDirection="column",_.style.fontFamily="-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",_.style.width="100%",x.appendChild(_);var T=document.createElement("div");T.style.zIndex="1000",T.style.display="flex",T.style.flexDirection="row",T.style.width="100%";var C=document.createElement("span");C.innerHTML="Advanced Search",C.style.fontWeight="600",T.appendChild(C);var P=document.createElement("div");P.style.cursor="pointer",P.style.zIndex="1000",P.style.background="none",P.style.fill="#4285f4",P.style.height="24px",P.style.width="24px",P.style.marginLeft="auto",P.innerHTML='<svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></svg>',T.appendChild(P),_.appendChild(T);var M=document.createElement("span");M.innerHTML="",M.style.fontSize="small",M.style.whiteSpace="nowrap",_.appendChild(M);var R=document.createElement("div");x.appendChild(R),R.style.whiteSpace="pre-wrap",R.style.wordWrap="break-word",R.style.paddingTop="10px",R.style.paddingBottom="10px",R.style.fontFamily="monospace";var A=document.createElement("div");A.style.lineHeight="10px",A.style.fontStyle="italic",A.style.marginLeft="auto",A.style.marginTop="5px",A.style.whiteSpace="normal",A.style.fontSize="8pt",A.style.color="#70757a",A.style.display="flex",A.style.flexDirection="column";var I=document.createElement("span");I.innerHTML="What can I to write?",I.style.marginLeft="auto",I.style.marginBottom="4px",I.style.cursor="pointer",I.onmouseenter=function(){I.style.textDecoration="underline"},I.onmouseleave=function(){I.style.textDecoration=""},I.onclick=function(){chrome.runtime.sendMessage("__new_help_tab__")},A.appendChild(I);var O=document.createElement("span");const D="Show suggestions (ctrl) + (space)";function q(e){let t=e;for(;t;){const e=window.getComputedStyle(t);if(e.borderRadius&&"0px"!=e.borderRadius)return t;t=t.parentElement}return null}function L(){if(!m)return;const e=window.getComputedStyle(m),t=null==m?void 0:m.getBoundingClientRect();S.style.left=`${(null==t?void 0:t.x)+(null==t?void 0:t.width)}px`,S.style.top=`${null==t?void 0:t.y}px`,k.style.boxShadow=m.style.boxShadow&&"none"!=m.style.boxShadow?m.style.boxShadow:e.boxShadow,k.style.height=e.height,k.style.width=e.height;k.style.border=e.border,k.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" fill="#4285f4" viewBox="0 0 24 24" width="24px" height="24px"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"/></svg>'}function j(){var e,t;return r(this,void 0,void 0,(function*(){var n=!1;let r=0;for(;!n;){const o=document.querySelector('form * input[spellcheck="false"]');if(r++,r>50)break;if(o){if(n=!0,h===o)return;h=o,(m=q(null===(t=null===(e=null==o?void 0:o.parentElement)||void 0===e?void 0:e.parentElement)||void 0===t?void 0:t.parentElement))&&m.appendChild(b),L(),z(),Y(!1),document.addEventListener("keydown",(e=>{if(13===e.keyCode)return e.cancelBubble=!0,e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault(),void V(f)}),{capture:!0}),h.addEventListener("keydown",(e=>{if(13===e.keyCode)return e.cancelBubble=!0,e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault(),void V(f)}),{capture:!0}),h.addEventListener("keyup",(e=>{w=!0,d.unparsedQuery=e.target&&e.target.value?e.target.value:"",d.lastReadableQuery=void 0,d.lastResponse=void 0,d.parsedQuery=void 0,setTimeout((()=>{y+200<(new Date).getTime()&&Q(null==h?void 0:h.value).then((()=>{d.lastReadableQuery&&!c?(l=!1,Y(!0)):d.lastReadableQuery||l||Y(!1),H()}))}),201),y=(new Date).getTime()})),h.addEventListener("click",(()=>{var e;$();let t=!!(null===(e=d.lastResponse)||void 0===e?void 0:e.query)&&d.lastResponse.query.length>0;!t&&c&&(t=!0),Y(t||l)})),k.addEventListener("click",(e=>{$(),l=!0,p=!0,Z(),Y(!0),e.stopPropagation(),e.stopImmediatePropagation()})),P.addEventListener("click",(()=>{V(!0)})),document.body.addEventListener("keydown",(e=>{17!==e.keyCode||(f=!0)})),document.body.addEventListener("keyup",(e=>{17===e.keyCode&&(f=!1),32!==e.keyCode||f&&(p=!p,c||(p=!0),Z(),l=!0,p&&Y(!0))})),window.addEventListener("click",(function(e){e.target&&(E.contains(e.target)||(null==m?void 0:m.contains(e.target))||c&&Y(!1,!0))})),document.addEventListener("scroll",(function(){g||(window.requestAnimationFrame((function(){L(),setTimeout((()=>{L()}),50),g=!1})),g=!0)}))}else yield new Promise((e=>setTimeout(e,500)))}}))}O.innerHTML=D,O.style.marginLeft="auto",O.style.cursor="pointer",O.onmouseenter=function(){O.style.textDecoration="underline"},O.onmouseleave=function(){O.style.textDecoration=""},O.onclick=function(){p=!p,Z()},A.appendChild(O),x.appendChild(A),j(),chrome.runtime.onMessage.addListener((function(e){"__new_url_ql__"===e.message&&j()}));const N={},B={},F={lte:"≤",lt:"<",eq:"="};Object.keys(B).forEach((e=>{B[e].forEach((t=>{if(!F[t])throw new Error(`No readable representation for ${e} found`)}))}));let U=[new e.w8];U=[U[0]];const G=U.map((e=>(0,t.generateSchema)(e))),K={};function H(){chrome.storage.sync.set({lastQuerySession:d})}function z(){var e;return r(this,void 0,void 0,(function*(){h&&(!(s=yield new Promise((function(e){chrome.storage.sync.get("lastQuerySession",(function(t){e(t.lastQuerySession)}))})))&&w||((d=s)&&(null===(e=d.parsedQuery)||void 0===e?void 0:e.searchParams)==(null==h?void 0:h.value)?J(d.parsedQuery)==h.value?Q(d.unparsedQuery):Q(h.value):d={}))}))}function $(){var e;!v&&d.unparsedQuery&&(e=d.unparsedQuery,!0,h&&(h.focus(),h.value="",document.execCommand("insertText",!1,e),h.dispatchEvent(new Event("change",{bubbles:!0}))),v=!0)}function V(e){if(H(),d.parsedQuery&&e)d.parsedQuery.searchParams?function(e){const t=J(e),n=function(e){const t=X(e),n=[];t.forEach(((e,t)=>{n.push(`${t}=${e}`)}));const r=n.join("&");return r.length>0?"&"+r:r}(e),r=`https://${window.location.hostname}/search?q=${t}${n}`;window.location.href=r}(d.parsedQuery):alert('To perform an Advanced Search you need to provide at least one argument of text type, example: "contains apple"');else{let e=window.location.href;if(h){const t=new URL(e);t.searchParams.set("q",h.value),t.searchParams.delete("as_q"),t.searchParams.delete("oq"),t.searchParams.delete("as_filetype"),t.pathname!=o&&(t.pathname=o),e=t.toString()}if(s){e=decodeURI(e);const t=X(s.parsedQuery),n=new URL(e);for(t.forEach(((e,t)=>{const r=n.searchParams.get(t);r!=e&&r!=encodeURIComponent(e)||n.searchParams.delete(t)})),e=n.toString();e.endsWith("&");)e=e.substring(0,e.length-1)}window.location.href=e}return d.parsedQuery}function Q(n=""){return r(this,void 0,void 0,(function*(){yield a;const r=yield(0,t.translate)(n,U,{query:{},suggest:{limit:11}},{nestedConditions:!1,concurrencySize:1});!function(t,n){var r,o;d.lastResponse=n,d.parsedQuery={};const a=null==n?void 0:n.suggest;let s=null==a?void 0:a.map((e=>e.text.trim())).slice(0,Math.min(a.length,10)).join("</br>");if(i=s,Z(),!n||!n.query||0==n.query.length)return W(),void(l||Y(!1));const u=function(t,n){if(!n)return null;for(let r=0;r<n.length;r++){const o=n[r];if(0==o.offset&&o.length>2){let n=t.substring(o.offset,o.offset+o.length);return n.startsWith('"')&&n.endsWith('"')&&(n=n.substring(1,n.length-1)),{compare:{key:e.Eb,eq:n}}}}return null}(t,n.unknown);if(d.lastResponse&&d.lastResponse.query&&u)if(d.lastResponse.query[0].condition.and){const t=d.lastResponse.query[0].condition;t.and.find((t=>{var n;return(null===(n=t.compare)||void 0===n?void 0:n.key)==e.Eb}))||t.and.push(u)}else if(d.lastResponse.query[0].condition.compare){const t=d.lastResponse.query[0].condition;if(t.compare.key!=e.Eb){const e={and:[t,u]};d.lastResponse.query[0].condition=e}}var c;(null===(r=d.lastResponse)||void 0===r?void 0:r.query)&&(null===(o=d.lastResponse.query[0])||void 0===o?void 0:o.condition)&&(d.parsedQuery=function(t){if(!t)return{};return function(e){const t=[],n=[],r=[];return e.forEach((e=>{e&&(e.searchParams&&t.push(e.searchParams),e.queryParams&&n.push(...e.queryParams),e.searchParamsPre&&r.push(e.searchParamsPre))})),{searchParams:t.join(" "),queryParams:n,searchParamsPre:r.join(" ")}}([ne(t),function(t){const n=[];let r=t.and;return t.compare&&(r=[t]),r.forEach((t=>{const r=t.compare;if(r.key==e.Mx){let e="";r.eq&&(e=`cd_min:${oe(r.eq)},cd_max:${oe(r.eq)}`),r.lt&&(e=`cd_max:${oe((o=r.lt,a=new Date(o),a.setDate(a.getDate()-1),a.getTime()))}`),r.lte&&(e=`cd_max:${oe(r.lte)}`),r.gt&&(e=`cd_min:${oe(function(e){var t=new Date(e);return t.setDate(t.getDate()+1),t.getTime()}(r.gt))}`),r.gte&&(e=`cd_min:${oe(r.gte)}`),n.push(e)}var o,a})),n&&n.length>0?(n.push("cdr:1"),{queryParams:n.map((e=>({key:"tbs",value:e})))}):{}}(t),function(e){const t=te(e);return null==t.to&&null==t.from?{}:{searchParams:`${null!=t.from?t.from:""}...${null!=t.to?t.to:""}${t.unit?" "+t.unit:""}`}}(t)])}(d.lastResponse.query[0].condition)),d.lastReadableQuery=d.lastResponse?function(t){let n=null;(null==t?void 0:t.query)&&t.query.length>0&&(n=t.query[0].condition);const r=ee(n),o=function(t){const n=te(t),r=ie(K[e.Tq].description);return n.from||n.to?`${r} ${null!=n.from?n.from+" ":""}to ${null!=n.to?n.to:""}${n.unit?" "+n.unit:""}`:""}(n),a=[];return r&&a.push(r),o&&a.push(o),a.join("\n")}(d.lastResponse):void 0,d.lastReadableQuery?(c=d.lastReadableQuery,R.innerHTML=c):W()}(n,r)}))}function W(){R.innerHTML="No results"}function Y(e,t){c==e&&u||(u=!0,c&&!e&&d.lastReadableQuery&&!t||(c=e,m&&(m.lastChild!=b&&m.appendChild(b),e?(Z(),S.firstChild==k&&S.removeChild(k),S.appendChild(E)):(S.firstChild==E&&S.removeChild(E),S.appendChild(k))),L()))}function J(e){if(e)return(e.searchParamsPre?e.searchParamsPre:"")+e.searchParams}function X(e){if(!(null==e?void 0:e.queryParams))return new Map;const t=new Map;null==e||e.queryParams.forEach((e=>{let n=t.get(e.key);n||(n=[],t.set(e.key,n)),n.push(e.value)}));const n=new Map;return t.forEach(((e,t)=>{n.set(t,e.join(","))})),n}function Z(){O.innerHTML=p?"Hide suggestions (ctrl) + (space)":D,M.innerHTML=p?`Suggestions</br><i>${i}</i>`:""}function ee(t){if(t.and){const e=[];return t.and.forEach((t=>{const n=ee(t);n&&e.push(n)})),`${e.join("<br/>")}`}if(t.compare){const n=[],r=t.compare;return r.key==e.Tq||r.key==e.iT?null:(n.push(ie(K[r.key].description)),r.eq?n.push(" = "+ae(r.key,r.eq)):r.gt?n.push(" > "+ae(r.key,r.gt)):r.gte?n.push(" ≥ "+ae(r.key,r.gte)):r.lt?n.push(" < "+ae(r.key,r.lt)):r.lte&&n.push(" ≤ "+ae(r.key,r.lte)),n.join(""))}return""}function te(t){const n={};let r=t.and;return t.compare&&(r=[t]),r.forEach((t=>{const r=t.compare;switch(r.key){case e.iT:n.unit=String(r.eq);break;case e.Tq:if(null!=r.gt){n.from=r.gt;break}if(null!=r.gte){n.from=r.gte;break}if(null!=r.lt){n.to=r.lt;break}if(null!=r.lte){n.to=r.lte;break}if(null==n.from&&null==n.to&&null!=r.eq){n.from=r.eq,n.to=r.eq;break}if(null!=r.eq){const e=r.eq;null!=n.from&&e<n.from?(n.to=n.from,n.from=e):null!=n.to&&e>n.to?(n.from=n.to,n.to=e):null!=n.from?n.from=e:null!=n.to&&(n.to=e);break}}})),n}function ne(t,n={}){if(!t)return{};if(t.and){const e=[],r=[],o=[];return t.and.forEach((t=>{const a=ne(t,n);a.searchParams&&e.push(a.searchParams),a.queryParams&&r.push(...a.queryParams),a.searchParamsPre&&o.push(a.searchParamsPre)})),{searchParams:`${e.join(" ")}`,queryParams:r,searchParamsPre:o.join(" ")}}if(t.compare){const r=t.compare,o=ie(K[r.key].description);if(n[r.key]=(n[r.key]?n[r.key]:0)+1,null!=N[r.key]&&n[r.key]>N[r.key]&&alert(`You can only filter on ${o} ${N[r.key]} time(s)`),B[r.key]){const e=[...B[r.key]].filter((e=>null!=r[e]));e.length>0&&alert(`You can not filter on ${o} with a ${F[e[0]]} comparator`)}switch(r.key){case e.Eb:return{searchParams:String(r.eq)};case e.Fn:return{searchParams:`"${r.eq}"`};case e.cn:return{searchParams:`${re(r.eq).join(" OR ")}`};case e.OM:return{searchParams:`${re(r.eq).map((e=>"-"+e)).join(" ")}`};case e.Ye:return{queryParams:[{key:"lr",value:String(r.eq)}]};case e.zb:return{queryParams:[{key:"cr",value:String(r.eq)}]};case e.DO:return{searchParams:`site:${r.eq}`};case e.b2:return{searchParamsPre:`${r.eq}:`};case e.jT:return"safe"==r.eq?{queryParams:[{key:"safe",value:"active"}]}:{};case e.VR:{let e=String(r.eq);return e.startsWith(".")&&(e=e.substring(1)),{searchParams:"fileType:"+e}}case e.CG:return{queryParams:[{key:"tbs",value:"sur:"+String(r.eq)}]};case e.uq:return{queryParams:[{key:"tbm",value:String(r.eq)}]}}}return{}}function re(e){return e?e.replace(/,\s+/g,",").split(/[\n,\s+]/):[]}function oe(e){const t=new Date(e);var n=t.getFullYear(),r=(1+t.getMonth()).toString();r=r.length>1?r:"0"+r;var o=t.getDate().toString();return r+"/"+(o=o.length>1?o:"0"+o)+"/"+n}function ae(e,t){const n=K[e];if("DATE"==n.domain)return oe(t);if("string"!=typeof n.domain&&n.domain[t]){let e=ie(n.domain[t]);if(e)return e}return t}function ie(e){if(Array.isArray(e))return e[0];if(e.ANY)return ie(e.ANY);for(const t of Object.keys(e)){const n=ie(e[t]);if(n)return n}return""}G.forEach((e=>{e.fields.forEach((e=>{K[e.key]=e}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,